<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hexo搭建及维护</title>
      <link href="/2021/10/20/hexo-da-jian-ji-wei-hu/"/>
      <url>/2021/10/20/hexo-da-jian-ji-wei-hu/</url>
      
        <content type="html"><![CDATA[<h1 id="基于Hexo的博客搭建及维护"><a href="#基于Hexo的博客搭建及维护" class="headerlink" title="基于Hexo的博客搭建及维护"></a>基于Hexo的博客搭建及维护</h1><p>本文将说明如何搭建一个自己的Hexo博客，以及后续如何对该博客进行维护。</p><hr><h2 id="基础搭建"><a href="#基础搭建" class="headerlink" title="基础搭建"></a>基础搭建</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>安装以下应用：</p><ul><li><a href="http://git-scm.com/">Git</a></li><li><a href="https://nodejs.org/en/">Node.js</a></li></ul><p>安装完成以后可以通过命令行的方式查看版本号</p><p>打开CMD</p><pre class="line-numbers language-none"><code class="language-none">git --version   # 查看git版本号node# 查看node.js版本号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>都能正确显示则表示可以进行下一步了。</p><h3 id="Hexo的安装"><a href="#Hexo的安装" class="headerlink" title="Hexo的安装"></a>Hexo的安装</h3><p>新建一个文件夹，后续所有操作都在此文件夹下进行。</p><p>安装淘宝的cnpm管理器，可能会提升后续的安装速度（可选），如安装失败则后续还是使用npm进行安装</p><pre class="line-numbers language-none"><code class="language-none">npm -vnpm install -g cnpm --registry=http://registry.npm.taobao.orgcnpm -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用npm或者cnpm安装Hexo框架</p><pre class="line-numbers language-none"><code class="language-none">npm install -g hexo-clihexo -v# 查看hexo版本信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>初始化一个博客</p><pre class="line-numbers language-none"><code class="language-none">hexo init# 初始化博客hexo s# 启动本地blog服务http://localhost:4000/ # 本地访问网页的地址，可以查看初始效果<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="通过把博客部署到Github以及Gitee上来进行访问"><a href="#通过把博客部署到Github以及Gitee上来进行访问" class="headerlink" title="通过把博客部署到Github以及Gitee上来进行访问"></a>通过把博客部署到Github以及Gitee上来进行访问</h3><p>配置文件夹中的配置文件_config.yml：</p>  <pre class="line-numbers language-none"><code class="language-none"># Deployment## Docs: https://hexo.io/docs/one-command-deploymentdeploy:  type: 'git'  repo:    github: git@github.com:aik-n/aik-n.github.io.git    gitee: git@gitee.com:aik-n/aik-n.github.io.git  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  该配置文件因同时给定了两个地址，所以下面在部署时会同时部署到两边。</p><ul><li><p><strong>部署在Github上</strong></p><p>在Github上创建一个新的仓库（以自己的为例）aik-n.github.io</p><p>然后在文件夹中安装git部署插件</p><pre class="line-numbers language-none"><code class="language-none">npm install --save hexo-deployer-git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>之后通过hexo命令将博客部署到Github的仓库中去</p><pre class="line-numbers language-none"><code class="language-none">hexo clean# 清理一下hexo g# 生成hexo d# 部署到远程Git仓库<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>即可通过<a href="https://aik-n.github.io/%E6%9D%A5%E8%AE%BF%E9%97%AE%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2">https://aik-n.github.io/来访问自己的博客</a></p></li><li><p>部署在Gitee上</p><p>在Gitee上创建一个新的仓库，名字自己取</p><p>然后在文件夹中安装git部署插件（上面安装过了这边就不用了）</p><pre class="line-numbers language-none"><code class="language-none">npm install --save hexo-deployer-git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>之后通过hexo命令将博客部署到Gitee的仓库中去</p><pre class="line-numbers language-none"><code class="language-none">hexo clean# 清理一下hexo g# 生成hexo d# 部署到远程Git仓库<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>即可通过<a href="https://aik-n.gitee.io/%E6%9D%A5%E8%AE%BF%E9%97%AE%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2">https://aik-n.gitee.io/来访问自己的博客</a></p></li></ul><hr><h2 id="后续维护"><a href="#后续维护" class="headerlink" title="后续维护"></a>后续维护</h2><p>此时在Github上查看仓库中的文件可以发现和本地的文件并不相同，它只包含了网页的静态页面，像是主题以及文章源文件都是不在里面的。因此我们需要将源文件也上传到仓库里去，这样才能方便我们后续的维护工作。</p><h3 id="SSH配置"><a href="#SSH配置" class="headerlink" title="SSH配置"></a>SSH配置</h3><p>以本人电脑为例：C:\Users\xwy.ssh目录下存放着公钥和密钥的文件信息。如果没配过的就把这文件夹下的全都删了，从头配起。</p><p>ssh文件夹右键，打开Git Bash窗口。</p><p>如果你是第一次使用，或者还没有配置过的话需要操作一下命令，自行替换相应字段。</p><pre class="line-numbers language-git" data-language="git"><code class="language-git">git config --global user.name <span class="token string">"XXX"</span>git config --global user.email  <span class="token string">"XXX@gmail.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p><strong>GitHub</strong></p><p>在终端中输入：</p><pre class="line-numbers language-none"><code class="language-none">ssh-keygen -t rsa -C "xxx@gmail.com"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>按三次回车，则会在当前目录下生成rsa开头的两个文件，打开rsa.pub文件，里面就是公钥，复制到Github里的SSH设置里去。</p><p>验证一下是否连接：</p><pre class="line-numbers language-none"><code class="language-none">ssh -T git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>首次需要回复yes然后回车，如果成功则会有Hi XXX! You’ve successfully authenticated, but Github.com does not provide shell access.的内容返回。</p></li><li><p><strong>Gitee</strong></p><p>在终端中输入：</p><pre class="line-numbers language-none"><code class="language-none">ssh-keygen -t ed25519 -C "xxxxx@xxxxx.com"  # 这里邮箱填注册用到的邮箱<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>按三次回车，则会在当前目录下生成ed25519开头的两个文件，打开id_ed25519.pub文件，里面就是公钥，复制到Gitee里的SSH设置里去。</p><p>验证一下是否连接：</p><pre class="line-numbers language-none"><code class="language-none">ssh -T git@gitee.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>首次需要回复yes再回车，如果成功则会有Hi XXX! You’ve successfully authenticated, but Gitee.com does not provide shell access.的内容返回</p></li></ul><p>如果以上都配置好了但还是有错误提示的话，建议采用如下方法：</p><ul><li><p>在ssh文件夹中建立一个<strong>config</strong>文件（没有后缀名），内容如下：</p><pre class="line-numbers language-none"><code class="language-none"># giteeHost gitee.comHostName gitee.comPreferredAuthentications publickeyIdentityFile ~/.ssh/id_ed25519# githubHost github.comHostName github.comPreferredAuthentications publickeyIdentityFile ~/.ssh/github_id_rsa<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>里面的文件地址自行修改，之后再进行上述的验证操作。</p></li></ul><h3 id="备份至仓库分支上"><a href="#备份至仓库分支上" class="headerlink" title="备份至仓库分支上"></a>备份至仓库分支上</h3><h4 id="直接备份"><a href="#直接备份" class="headerlink" title="直接备份"></a>直接备份</h4><p>在Github/Gitee博客的仓库中创建一个分支<strong>source</strong>,并将其设置为默认分支</p><p>在博客的文件目录下打开Git Bash</p><p>查看一下本地分支：</p><pre class="line-numbers language-none"><code class="language-none">git branch -a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中绿色前面一个*的代表当前所处的分支，红色代表关联的远程分支，白色的代表存在的其他本地分支。</p><p>之后创建一个本地分支source，对应仓库里存放备份文件的分支：</p><pre class="line-numbers language-none"><code class="language-none">git branch source<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果创建了多个分支，可以通过下面来进行切换：</p><pre class="line-numbers language-none"><code class="language-none">git checkout 想要切换的分支名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在创建并切换到source分支后，开始将本地分支推到Git上：</p><pre class="line-numbers language-none"><code class="language-none">git init# 建立本地git仓库git remote add origin https://xxx@xx.git # （将本地的仓库关联到GitHub（码云）上对应的仓库，后面的https改成仓库地址git add .git commit -m"提交信息"git push origin source #代表把本地source分支的内容推到Github上仓库里的source下，创建新分支后的第一次需要加上-f强推<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意，其中git remote add origin 中的origin可以自己修改的，代表远程地址的别名，例如我想将本地仓库同时关联GitHub和Gitee，那么我可以执行下面两行：</p><pre class="line-numbers language-none"><code class="language-none">git remote add origin https://gitee.com/aik-n/aik-n.github.io.gitgit remote add origin1 https://github.com/aik-n/aik-n.github.io.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>一个origin，一个origin1。这样在push的时候，我们就可以选择往哪个上面推。</p><p>我们可以使用Git remote命令来查看相关信息：</p><pre class="line-numbers language-none"><code class="language-none">git remote -v# 可以查看远程仓库列表，有关联则会在下面都列出来git remote show 仓库别名# 可以查看该仓库的详细信息git remote add 仓库别名 仓库地址# 关联远程仓库git remote rm 仓库别名# 删除仓库git remote rename 老别名 新别名# 修改仓库名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用Hexo插件备份"><a href="#使用Hexo插件备份" class="headerlink" title="使用Hexo插件备份"></a>使用Hexo插件备份</h4><p>利用Hexo框架自带的hexo-git-backup插件进行快捷备份。</p><p>安装插件：</p><pre class="line-numbers language-none"><code class="language-none">npm install hexo-git-backup --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置博客目录的_config.yml文件</p><pre class="line-numbers language-none"><code class="language-none">backup:  type: git       message: hexo blog source     repository:      github: git@github.com:aik-n/aik-n.github.io.git,source #这里改成你自己的，分钟“source”也改成自己的，如果Github不存在会自动新建    gitee: git@gitee.com:aik-n/aik-n.github.io.git,source #这里改成你自己的，分钟“source”也改成自己的，如果Gitee不存在会自动新建<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行备份：</p><pre class="line-numbers language-none"><code class="language-none">hexo backup<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="更换新的电脑后"><a href="#更换新的电脑后" class="headerlink" title="更换新的电脑后"></a>更换新的电脑后</h2><p>在更换设备之后，我们只需要重新配置一下环境，然后把备份的项目从GitHub上拉下来就行了。</p><ol><li><p>下载<a href="http://git-scm.com/">Git</a>和<a href="https://nodejs.org/en/">Node.js</a>并安装</p></li><li><p><code>git clone 仓库地址</code></p><p>或者直接把项目包下载下来解压</p></li><li><p>在项目文件夹中安装Hexo框架以及后续部署使用的git部署插件，<strong>切记不要用<del>hexo init</del>把项目初始化了</strong>。</p><pre class="line-numbers language-none"><code class="language-none">npm install -g hexo-cli# Hexo框架安装npm install --save hexo-deployer-git# git部署插件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>之后由于配置文件都是直接从云拉下来的，所以不用再进行更改了，直接hexo三联进行部署，git push进行后续维护。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> git </tag>
            
            <tag> node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/10/19/hello-world/"/>
      <url>/2021/10/19/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>typora-vue-theme主题介绍</title>
      <link href="/2021/10/19/test/"/>
      <url>/2021/10/19/test/</url>
      
        <content type="html"><![CDATA[<h2 id="12312313"><a href="#12312313" class="headerlink" title="12312313"></a>12312313</h2><h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
